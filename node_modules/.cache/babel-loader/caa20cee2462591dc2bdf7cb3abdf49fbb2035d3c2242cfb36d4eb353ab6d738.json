{"ast":null,"code":"'use strict';\n\nvar dns = require('dns');\nvar defaults = require('./defaults');\nvar parse = require('pg-connection-string').parse; // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()];\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar];\n  }\n  return config[key] || envVar || defaults[key];\n};\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false;\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true;\n    case 'no-verify':\n      return {\n        rejectUnauthorized: false\n      };\n  }\n  return defaults.ssl;\n};\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\";\n};\nvar add = function (params, config, paramName) {\n  var value = config[paramName];\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value));\n  }\n};\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {};\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString));\n    }\n    this.user = val('user', config);\n    this.database = val('database', config);\n    if (this.database === undefined) {\n      this.database = this.user;\n    }\n    this.port = parseInt(val('port', config), 10);\n    this.host = val('host', config);\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config)\n    });\n    this.binary = val('binary', config);\n    this.options = val('options', config);\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl;\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true;\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = {\n        rejectUnauthorized: false\n      };\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false\n      });\n    }\n    this.client_encoding = val('client_encoding', config);\n    this.replication = val('replication', config);\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/');\n    this.application_name = val('application_name', config, 'PGAPPNAME');\n    this.fallback_application_name = val('fallback_application_name', config, false);\n    this.statement_timeout = val('statement_timeout', config, false);\n    this.lock_timeout = val('lock_timeout', config, false);\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false);\n    this.query_timeout = val('query_timeout', config, false);\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0;\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000);\n    }\n    if (config.keepAlive === false) {\n      this.keepalives = 0;\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1;\n    }\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000);\n    }\n  }\n  getLibpqConnectionString(cb) {\n    var params = [];\n    add(params, this, 'user');\n    add(params, this, 'password');\n    add(params, this, 'port');\n    add(params, this, 'application_name');\n    add(params, this, 'fallback_application_name');\n    add(params, this, 'connect_timeout');\n    add(params, this, 'options');\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? {\n      sslmode: this.ssl\n    } : {};\n    add(params, ssl, 'sslmode');\n    add(params, ssl, 'sslca');\n    add(params, ssl, 'sslkey');\n    add(params, ssl, 'sslcert');\n    add(params, ssl, 'sslrootcert');\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database));\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication));\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host));\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '));\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding));\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null);\n      params.push('hostaddr=' + quoteParamValue(address));\n      return cb(null, params.join(' '));\n    });\n  }\n}\nmodule.exports = ConnectionParameters;","map":{"version":3,"names":["dns","require","defaults","parse","val","key","config","envVar","undefined","process","env","toUpperCase","readSSLConfigFromEnvironment","PGSSLMODE","rejectUnauthorized","ssl","quoteParamValue","value","replace","add","params","paramName","push","ConnectionParameters","constructor","connectionString","Object","assign","user","database","port","parseInt","host","defineProperty","configurable","enumerable","writable","binary","options","client_encoding","replication","isDomainSocket","indexOf","application_name","fallback_application_name","statement_timeout","lock_timeout","idle_in_transaction_session_timeout","query_timeout","connectionTimeoutMillis","connect_timeout","PGCONNECT_TIMEOUT","Math","floor","keepAlive","keepalives","keepAliveInitialDelayMillis","keepalives_idle","getLibpqConnectionString","cb","sslmode","join","lookup","err","address","module","exports"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/pg/lib/connection-parameters.js"],"sourcesContent":["'use strict'\n\nvar dns = require('dns')\n\nvar defaults = require('./defaults')\n\nvar parse = require('pg-connection-string').parse // parses a connection string\n\nvar val = function (key, config, envVar) {\n  if (envVar === undefined) {\n    envVar = process.env['PG' + key.toUpperCase()]\n  } else if (envVar === false) {\n    // do nothing ... use false\n  } else {\n    envVar = process.env[envVar]\n  }\n\n  return config[key] || envVar || defaults[key]\n}\n\nvar readSSLConfigFromEnvironment = function () {\n  switch (process.env.PGSSLMODE) {\n    case 'disable':\n      return false\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      return true\n    case 'no-verify':\n      return { rejectUnauthorized: false }\n  }\n  return defaults.ssl\n}\n\n// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes\nvar quoteParamValue = function (value) {\n  return \"'\" + ('' + value).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\") + \"'\"\n}\n\nvar add = function (params, config, paramName) {\n  var value = config[paramName]\n  if (value !== undefined && value !== null) {\n    params.push(paramName + '=' + quoteParamValue(value))\n  }\n}\n\nclass ConnectionParameters {\n  constructor(config) {\n    // if a string is passed, it is a raw connection string so we parse it into a config\n    config = typeof config === 'string' ? parse(config) : config || {}\n\n    // if the config has a connectionString defined, parse IT into the config we use\n    // this will override other default values with what is stored in connectionString\n    if (config.connectionString) {\n      config = Object.assign({}, config, parse(config.connectionString))\n    }\n\n    this.user = val('user', config)\n    this.database = val('database', config)\n\n    if (this.database === undefined) {\n      this.database = this.user\n    }\n\n    this.port = parseInt(val('port', config), 10)\n    this.host = val('host', config)\n\n    // \"hiding\" the password so it doesn't show up in stack traces\n    // or if the client is console.logged\n    Object.defineProperty(this, 'password', {\n      configurable: true,\n      enumerable: false,\n      writable: true,\n      value: val('password', config),\n    })\n\n    this.binary = val('binary', config)\n    this.options = val('options', config)\n\n    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl\n\n    if (typeof this.ssl === 'string') {\n      if (this.ssl === 'true') {\n        this.ssl = true\n      }\n    }\n    // support passing in ssl=no-verify via connection string\n    if (this.ssl === 'no-verify') {\n      this.ssl = { rejectUnauthorized: false }\n    }\n    if (this.ssl && this.ssl.key) {\n      Object.defineProperty(this.ssl, 'key', {\n        enumerable: false,\n      })\n    }\n\n    this.client_encoding = val('client_encoding', config)\n    this.replication = val('replication', config)\n    // a domain socket begins with '/'\n    this.isDomainSocket = !(this.host || '').indexOf('/')\n\n    this.application_name = val('application_name', config, 'PGAPPNAME')\n    this.fallback_application_name = val('fallback_application_name', config, false)\n    this.statement_timeout = val('statement_timeout', config, false)\n    this.lock_timeout = val('lock_timeout', config, false)\n    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)\n    this.query_timeout = val('query_timeout', config, false)\n\n    if (config.connectionTimeoutMillis === undefined) {\n      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0\n    } else {\n      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)\n    }\n\n    if (config.keepAlive === false) {\n      this.keepalives = 0\n    } else if (config.keepAlive === true) {\n      this.keepalives = 1\n    }\n\n    if (typeof config.keepAliveInitialDelayMillis === 'number') {\n      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)\n    }\n  }\n\n  getLibpqConnectionString(cb) {\n    var params = []\n    add(params, this, 'user')\n    add(params, this, 'password')\n    add(params, this, 'port')\n    add(params, this, 'application_name')\n    add(params, this, 'fallback_application_name')\n    add(params, this, 'connect_timeout')\n    add(params, this, 'options')\n\n    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? { sslmode: this.ssl } : {}\n    add(params, ssl, 'sslmode')\n    add(params, ssl, 'sslca')\n    add(params, ssl, 'sslkey')\n    add(params, ssl, 'sslcert')\n    add(params, ssl, 'sslrootcert')\n\n    if (this.database) {\n      params.push('dbname=' + quoteParamValue(this.database))\n    }\n    if (this.replication) {\n      params.push('replication=' + quoteParamValue(this.replication))\n    }\n    if (this.host) {\n      params.push('host=' + quoteParamValue(this.host))\n    }\n    if (this.isDomainSocket) {\n      return cb(null, params.join(' '))\n    }\n    if (this.client_encoding) {\n      params.push('client_encoding=' + quoteParamValue(this.client_encoding))\n    }\n    dns.lookup(this.host, function (err, address) {\n      if (err) return cb(err, null)\n      params.push('hostaddr=' + quoteParamValue(address))\n      return cb(null, params.join(' '))\n    })\n  }\n}\n\nmodule.exports = ConnectionParameters\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}