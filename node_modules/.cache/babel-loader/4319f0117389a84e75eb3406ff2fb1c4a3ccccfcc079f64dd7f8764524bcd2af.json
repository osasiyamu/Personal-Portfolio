{"ast":null,"code":"'use strict';\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/;\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/;\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/;\nvar INFINITY = /^-?infinity$/;\nmodule.exports = function parseDate(isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'));\n  }\n  var matches = DATE_TIME.exec(isoDate);\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null;\n  }\n  var isBC = !!matches[8];\n  var year = parseInt(matches[1], 10);\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3];\n  var hour = parseInt(matches[4], 10);\n  var minute = parseInt(matches[5], 10);\n  var second = parseInt(matches[6], 10);\n  var ms = matches[7];\n  ms = ms ? 1000 * parseFloat(ms) : 0;\n  var date;\n  var offset = timeZoneOffset(isoDate);\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms));\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year);\n    }\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset);\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms);\n    if (is0To99(year)) {\n      date.setFullYear(year);\n    }\n  }\n  return date;\n};\nfunction getDate(isoDate) {\n  var matches = DATE.exec(isoDate);\n  if (!matches) {\n    return;\n  }\n  var year = parseInt(matches[1], 10);\n  var isBC = !!matches[4];\n  if (isBC) {\n    year = bcYearToNegativeYear(year);\n  }\n  var month = parseInt(matches[2], 10) - 1;\n  var day = matches[3];\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day);\n  if (is0To99(year)) {\n    date.setFullYear(year);\n  }\n  return date;\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset(isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0;\n  }\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1]);\n  if (!zone) return;\n  var type = zone[1];\n  if (type === 'Z') {\n    return 0;\n  }\n  var sign = type === '-' ? -1 : 1;\n  var offset = parseInt(zone[2], 10) * 3600 + parseInt(zone[3] || 0, 10) * 60 + parseInt(zone[4] || 0, 10);\n  return offset * sign * 1000;\n}\nfunction bcYearToNegativeYear(year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1);\n}\nfunction is0To99(num) {\n  return num >= 0 && num < 100;\n}","map":{"version":3,"names":["DATE_TIME","DATE","TIME_ZONE","INFINITY","module","exports","parseDate","isoDate","test","Number","replace","matches","exec","getDate","isBC","year","parseInt","bcYearToNegativeYear","month","day","hour","minute","second","ms","parseFloat","date","offset","timeZoneOffset","Date","UTC","is0To99","setUTCFullYear","setTime","getTime","setFullYear","endsWith","zone","split","type","sign","num"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/postgres-date/index.js"],"sourcesContent":["'use strict'\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}