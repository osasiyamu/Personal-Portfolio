{"ast":null,"code":"'use strict';\n\nvar types = require('pg-types');\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/;\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null;\n    this.rowCount = null;\n    this.oid = null;\n    this.rows = [];\n    this.fields = [];\n    this._parsers = undefined;\n    this._types = types;\n    this.RowCtor = null;\n    this.rowAsArray = rowMode === 'array';\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray;\n    }\n    this._prebuiltEmptyResultObject = null;\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match;\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text);\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command);\n    }\n    if (match) {\n      this.command = match[1];\n      if (match[3]) {\n        // COMMMAND OID ROWS\n        this.oid = parseInt(match[2], 10);\n        this.rowCount = parseInt(match[3], 10);\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10);\n      }\n    }\n  }\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length);\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i];\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue);\n      } else {\n        row[i] = null;\n      }\n    }\n    return row;\n  }\n  parseRow(rowData) {\n    var row = {\n      ...this._prebuiltEmptyResultObject\n    };\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i];\n      var field = this.fields[i].name;\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue);\n      }\n    }\n    return row;\n  }\n  addRow(row) {\n    this.rows.push(row);\n  }\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions;\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length);\n    }\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i];\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text');\n      }\n    }\n    this._createPrebuiltEmptyResultObject();\n  }\n  _createPrebuiltEmptyResultObject() {\n    var row = {};\n    for (var i = 0; i < this.fields.length; i++) {\n      row[this.fields[i].name] = null;\n    }\n    this._prebuiltEmptyResultObject = {\n      ...row\n    };\n  }\n}\nmodule.exports = Result;","map":{"version":3,"names":["types","require","matchRegexp","Result","constructor","rowMode","command","rowCount","oid","rows","fields","_parsers","undefined","_types","RowCtor","rowAsArray","parseRow","_parseRowAsArray","_prebuiltEmptyResultObject","addCommandComplete","msg","match","text","exec","parseInt","rowData","row","Array","length","i","len","rawValue","field","name","addRow","push","addFields","fieldDescriptions","desc","getTypeParser","dataTypeID","format","_createPrebuiltEmptyResultObject","module","exports"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/pg/lib/result.js"],"sourcesContent":["'use strict'\n\nvar types = require('pg-types')\n\nvar matchRegexp = /^([A-Za-z]+)(?: (\\d+))?(?: (\\d+))?/\n\n// result object returned from query\n// in the 'end' event and also\n// passed as second argument to provided callback\nclass Result {\n  constructor(rowMode, types) {\n    this.command = null\n    this.rowCount = null\n    this.oid = null\n    this.rows = []\n    this.fields = []\n    this._parsers = undefined\n    this._types = types\n    this.RowCtor = null\n    this.rowAsArray = rowMode === 'array'\n    if (this.rowAsArray) {\n      this.parseRow = this._parseRowAsArray\n    }\n    this._prebuiltEmptyResultObject = null\n  }\n\n  // adds a command complete message\n  addCommandComplete(msg) {\n    var match\n    if (msg.text) {\n      // pure javascript\n      match = matchRegexp.exec(msg.text)\n    } else {\n      // native bindings\n      match = matchRegexp.exec(msg.command)\n    }\n    if (match) {\n      this.command = match[1]\n      if (match[3]) {\n        // COMMMAND OID ROWS\n        this.oid = parseInt(match[2], 10)\n        this.rowCount = parseInt(match[3], 10)\n      } else if (match[2]) {\n        // COMMAND ROWS\n        this.rowCount = parseInt(match[2], 10)\n      }\n    }\n  }\n\n  _parseRowAsArray(rowData) {\n    var row = new Array(rowData.length)\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      if (rawValue !== null) {\n        row[i] = this._parsers[i](rawValue)\n      } else {\n        row[i] = null\n      }\n    }\n    return row\n  }\n\n  parseRow(rowData) {\n    var row = { ... this._prebuiltEmptyResultObject }\n    for (var i = 0, len = rowData.length; i < len; i++) {\n      var rawValue = rowData[i]\n      var field = this.fields[i].name\n      if (rawValue !== null) {\n        row[field] = this._parsers[i](rawValue)\n      }\n    }\n    return row\n  }\n\n  addRow(row) {\n    this.rows.push(row)\n  }\n\n  addFields(fieldDescriptions) {\n    // clears field definitions\n    // multiple query statements in 1 action can result in multiple sets\n    // of rowDescriptions...eg: 'select NOW(); select 1::int;'\n    // you need to reset the fields\n    this.fields = fieldDescriptions\n    if (this.fields.length) {\n      this._parsers = new Array(fieldDescriptions.length)\n    }\n    for (var i = 0; i < fieldDescriptions.length; i++) {\n      var desc = fieldDescriptions[i]\n      if (this._types) {\n        this._parsers[i] = this._types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      } else {\n        this._parsers[i] = types.getTypeParser(desc.dataTypeID, desc.format || 'text')\n      }\n    }\n    this._createPrebuiltEmptyResultObject()\n  }\n  _createPrebuiltEmptyResultObject() {\n    var row = {}\n    for (var i = 0; i < this.fields.length; i++) {\n      row[this.fields[i].name] = null\n    }\n    this._prebuiltEmptyResultObject = { ... row }\n  }\n}\n\nmodule.exports = Result\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}