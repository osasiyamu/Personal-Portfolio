{"ast":null,"code":"const nodeCrypto = require('crypto');\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5\n};\n\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */\nconst webCrypto = nodeCrypto.webcrypto || globalThis.crypto;\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */\nconst subtleCrypto = webCrypto.subtle;\nconst textEncoder = new TextEncoder();\n\n/**\n *\n * @param {*} length\n * @returns\n */\nfunction randomBytes(length) {\n  return webCrypto.getRandomValues(Buffer.alloc(length));\n}\nasync function md5(string) {\n  try {\n    return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex');\n  } catch (e) {\n    // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n    // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n    // This is why we cannot just use WebCrypto in all environments.\n    const data = typeof string === 'string' ? textEncoder.encode(string) : string;\n    const hash = await subtleCrypto.digest('MD5', data);\n    return Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join('');\n  }\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n  var inner = await md5(password + user);\n  var outer = await md5(Buffer.concat([Buffer.from(inner), salt]));\n  return 'md5' + outer;\n}\n\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */\nasync function sha256(text) {\n  return await subtleCrypto.digest('SHA-256', text);\n}\n\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */\nasync function hmacSha256(keyBuffer, msg) {\n  const key = await subtleCrypto.importKey('raw', keyBuffer, {\n    name: 'HMAC',\n    hash: 'SHA-256'\n  }, false, ['sign']);\n  return await subtleCrypto.sign('HMAC', key, textEncoder.encode(msg));\n}\n\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */\nasync function deriveKey(password, salt, iterations) {\n  const key = await subtleCrypto.importKey('raw', textEncoder.encode(password), 'PBKDF2', false, ['deriveBits']);\n  const params = {\n    name: 'PBKDF2',\n    hash: 'SHA-256',\n    salt: salt,\n    iterations: iterations\n  };\n  return await subtleCrypto.deriveBits(params, key, 32 * 8, ['deriveBits']);\n}","map":{"version":3,"names":["nodeCrypto","require","module","exports","postgresMd5PasswordHash","randomBytes","deriveKey","sha256","hmacSha256","md5","webCrypto","webcrypto","globalThis","crypto","subtleCrypto","subtle","textEncoder","TextEncoder","length","getRandomValues","Buffer","alloc","string","createHash","update","digest","e","data","encode","hash","Array","from","Uint8Array","map","b","toString","padStart","join","user","password","salt","inner","outer","concat","text","keyBuffer","msg","key","importKey","name","sign","iterations","params","deriveBits"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/pg/lib/crypto/utils-webcrypto.js"],"sourcesContent":["const nodeCrypto = require('crypto')\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5,\n}\n\n/**\n * The Web Crypto API - grabbed from the Node.js library or the global\n * @type Crypto\n */\nconst webCrypto = nodeCrypto.webcrypto || globalThis.crypto\n/**\n * The SubtleCrypto API for low level crypto operations.\n * @type SubtleCrypto\n */\nconst subtleCrypto = webCrypto.subtle\nconst textEncoder = new TextEncoder()\n\n/**\n *\n * @param {*} length\n * @returns\n */\nfunction randomBytes(length) {\n  return webCrypto.getRandomValues(Buffer.alloc(length))\n}\n\nasync function md5(string) {\n  try {\n    return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n  } catch (e) {\n    // `createHash()` failed so we are probably not in Node.js, use the WebCrypto API instead.\n    // Note that the MD5 algorithm on WebCrypto is not available in Node.js.\n    // This is why we cannot just use WebCrypto in all environments.\n    const data = typeof string === 'string' ? textEncoder.encode(string) : string\n    const hash = await subtleCrypto.digest('MD5', data)\n    return Array.from(new Uint8Array(hash))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('')\n  }\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nasync function postgresMd5PasswordHash(user, password, salt) {\n  var inner = await md5(password + user)\n  var outer = await md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\n/**\n * Create a SHA-256 digest of the given data\n * @param {Buffer} data\n */\nasync function sha256(text) {\n  return await subtleCrypto.digest('SHA-256', text)\n}\n\n/**\n * Sign the message with the given key\n * @param {ArrayBuffer} keyBuffer\n * @param {string} msg\n */\nasync function hmacSha256(keyBuffer, msg) {\n  const key = await subtleCrypto.importKey('raw', keyBuffer, { name: 'HMAC', hash: 'SHA-256' }, false, ['sign'])\n  return await subtleCrypto.sign('HMAC', key, textEncoder.encode(msg))\n}\n\n/**\n * Derive a key from the password and salt\n * @param {string} password\n * @param {Uint8Array} salt\n * @param {number} iterations\n */\nasync function deriveKey(password, salt, iterations) {\n  const key = await subtleCrypto.importKey('raw', textEncoder.encode(password), 'PBKDF2', false, ['deriveBits'])\n  const params = { name: 'PBKDF2', hash: 'SHA-256', salt: salt, iterations: iterations }\n  return await subtleCrypto.deriveBits(params, key, 32 * 8, ['deriveBits'])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}