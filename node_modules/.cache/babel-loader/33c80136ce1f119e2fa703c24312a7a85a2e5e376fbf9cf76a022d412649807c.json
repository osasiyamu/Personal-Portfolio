{"ast":null,"code":"'use strict';\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ');\n    return {\n      host: config[0],\n      database: config[1]\n    };\n  }\n\n  // Check for empty host in URL\n\n  const config = {};\n  let result;\n  let dummyHost = false;\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1');\n  }\n  try {\n    result = new URL(str, 'postgres://base');\n  } catch (e) {\n    // The URL is invalid so try again with a dummy host\n    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base');\n    dummyHost = true;\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1];\n  }\n  config.user = config.user || decodeURIComponent(result.username);\n  config.password = config.password || decodeURIComponent(result.password);\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname);\n    config.database = result.searchParams.get('db');\n    config.client_encoding = result.searchParams.get('encoding');\n    return config;\n  }\n  const hostname = dummyHost ? '' : result.hostname;\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname);\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname;\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port;\n  }\n  const pathname = result.pathname.slice(1) || null;\n  config.database = pathname ? decodeURI(pathname) : null;\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true;\n  }\n  if (config.ssl === '0') {\n    config.ssl = false;\n  }\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {};\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? require('fs') : null;\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString();\n  }\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString();\n  }\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString();\n  }\n  switch (config.sslmode) {\n    case 'disable':\n      {\n        config.ssl = false;\n        break;\n      }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full':\n      {\n        break;\n      }\n    case 'no-verify':\n      {\n        config.ssl.rejectUnauthorized = false;\n        break;\n      }\n  }\n  return config;\n}\nmodule.exports = parse;\nparse.parse = parse;","map":{"version":3,"names":["parse","str","charAt","config","split","host","database","result","dummyHost","test","encodeURI","replace","URL","e","entry","searchParams","entries","user","decodeURIComponent","username","password","protocol","decodeURI","pathname","get","client_encoding","hostname","port","slice","ssl","sslcert","sslkey","sslrootcert","sslmode","fs","require","cert","readFileSync","toString","key","ca","rejectUnauthorized","module","exports"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/pg-connection-string/index.js"],"sourcesContent":["'use strict'\n\n//Parse method copied from https://github.com/brianc/node-postgres\n//Copyright (c) 2010-2014 Brian Carlson (brian.m.carlson@gmail.com)\n//MIT License\n\n//parses a connection string\nfunction parse(str) {\n  //unix socket\n  if (str.charAt(0) === '/') {\n    const config = str.split(' ')\n    return { host: config[0], database: config[1] }\n  }\n\n  // Check for empty host in URL\n\n  const config = {}\n  let result\n  let dummyHost = false\n  if (/ |%[^a-f0-9]|%[a-f0-9][^a-f0-9]/i.test(str)) {\n    // Ensure spaces are encoded as %20\n    str = encodeURI(str).replace(/\\%25(\\d\\d)/g, '%$1')\n  }\n\n  try {\n    result = new URL(str, 'postgres://base')\n  } catch (e) {\n    // The URL is invalid so try again with a dummy host\n    result = new URL(str.replace('@/', '@___DUMMY___/'), 'postgres://base')\n    dummyHost = true\n  }\n\n  // We'd like to use Object.fromEntries() here but Node.js 10 does not support it\n  for (const entry of result.searchParams.entries()) {\n    config[entry[0]] = entry[1]\n  }\n\n  config.user = config.user || decodeURIComponent(result.username)\n  config.password = config.password || decodeURIComponent(result.password)\n\n  if (result.protocol == 'socket:') {\n    config.host = decodeURI(result.pathname)\n    config.database = result.searchParams.get('db')\n    config.client_encoding = result.searchParams.get('encoding')\n    return config\n  }\n  const hostname = dummyHost ? '' : result.hostname\n  if (!config.host) {\n    // Only set the host if there is no equivalent query param.\n    config.host = decodeURIComponent(hostname)\n  } else if (hostname && /^%2f/i.test(hostname)) {\n    // Only prepend the hostname to the pathname if it is not a URL encoded Unix socket host.\n    result.pathname = hostname + result.pathname\n  }\n  if (!config.port) {\n    // Only set the port if there is no equivalent query param.\n    config.port = result.port\n  }\n\n  const pathname = result.pathname.slice(1) || null\n  config.database = pathname ? decodeURI(pathname) : null\n\n  if (config.ssl === 'true' || config.ssl === '1') {\n    config.ssl = true\n  }\n\n  if (config.ssl === '0') {\n    config.ssl = false\n  }\n\n  if (config.sslcert || config.sslkey || config.sslrootcert || config.sslmode) {\n    config.ssl = {}\n  }\n\n  // Only try to load fs if we expect to read from the disk\n  const fs = config.sslcert || config.sslkey || config.sslrootcert ? require('fs') : null\n\n  if (config.sslcert) {\n    config.ssl.cert = fs.readFileSync(config.sslcert).toString()\n  }\n\n  if (config.sslkey) {\n    config.ssl.key = fs.readFileSync(config.sslkey).toString()\n  }\n\n  if (config.sslrootcert) {\n    config.ssl.ca = fs.readFileSync(config.sslrootcert).toString()\n  }\n\n  switch (config.sslmode) {\n    case 'disable': {\n      config.ssl = false\n      break\n    }\n    case 'prefer':\n    case 'require':\n    case 'verify-ca':\n    case 'verify-full': {\n      break\n    }\n    case 'no-verify': {\n      config.ssl.rejectUnauthorized = false\n      break\n    }\n  }\n\n  return config\n}\n\nmodule.exports = parse\n\nparse.parse = parse\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}