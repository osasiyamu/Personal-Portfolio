{"ast":null,"code":"'use strict';\n\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\nconst nodeCrypto = require('crypto');\nfunction md5(string) {\n  return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex');\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n  var inner = md5(password + user);\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]));\n  return 'md5' + outer;\n}\nfunction sha256(text) {\n  return nodeCrypto.createHash('sha256').update(text).digest();\n}\nfunction hmacSha256(key, msg) {\n  return nodeCrypto.createHmac('sha256', key).update(msg).digest();\n}\nasync function deriveKey(password, salt, iterations) {\n  return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256');\n}\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes: nodeCrypto.randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5\n};","map":{"version":3,"names":["nodeCrypto","require","md5","string","createHash","update","digest","postgresMd5PasswordHash","user","password","salt","inner","outer","Buffer","concat","from","sha256","text","hmacSha256","key","msg","createHmac","deriveKey","iterations","pbkdf2Sync","module","exports","randomBytes"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/pg/lib/crypto/utils-legacy.js"],"sourcesContent":["'use strict'\n// This file contains crypto utility functions for versions of Node.js < 15.0.0,\n// which does not support the WebCrypto.subtle API.\n\nconst nodeCrypto = require('crypto')\n\nfunction md5(string) {\n  return nodeCrypto.createHash('md5').update(string, 'utf-8').digest('hex')\n}\n\n// See AuthenticationMD5Password at https://www.postgresql.org/docs/current/static/protocol-flow.html\nfunction postgresMd5PasswordHash(user, password, salt) {\n  var inner = md5(password + user)\n  var outer = md5(Buffer.concat([Buffer.from(inner), salt]))\n  return 'md5' + outer\n}\n\nfunction sha256(text) {\n  return nodeCrypto.createHash('sha256').update(text).digest()\n}\n\nfunction hmacSha256(key, msg) {\n  return nodeCrypto.createHmac('sha256', key).update(msg).digest()\n}\n\nasync function deriveKey(password, salt, iterations) {\n  return nodeCrypto.pbkdf2Sync(password, salt, iterations, 32, 'sha256')\n}\n\nmodule.exports = {\n  postgresMd5PasswordHash,\n  randomBytes: nodeCrypto.randomBytes,\n  deriveKey,\n  sha256,\n  hmacSha256,\n  md5,\n}\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEpC,SAASC,GAAGA,CAACC,MAAM,EAAE;EACnB,OAAOH,UAAU,CAACI,UAAU,CAAC,KAAK,CAAC,CAACC,MAAM,CAACF,MAAM,EAAE,OAAO,CAAC,CAACG,MAAM,CAAC,KAAK,CAAC;AAC3E;;AAEA;AACA,SAASC,uBAAuBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAE;EACrD,IAAIC,KAAK,GAAGT,GAAG,CAACO,QAAQ,GAAGD,IAAI,CAAC;EAChC,IAAII,KAAK,GAAGV,GAAG,CAACW,MAAM,CAACC,MAAM,CAAC,CAACD,MAAM,CAACE,IAAI,CAACJ,KAAK,CAAC,EAAED,IAAI,CAAC,CAAC,CAAC;EAC1D,OAAO,KAAK,GAAGE,KAAK;AACtB;AAEA,SAASI,MAAMA,CAACC,IAAI,EAAE;EACpB,OAAOjB,UAAU,CAACI,UAAU,CAAC,QAAQ,CAAC,CAACC,MAAM,CAACY,IAAI,CAAC,CAACX,MAAM,CAAC,CAAC;AAC9D;AAEA,SAASY,UAAUA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC5B,OAAOpB,UAAU,CAACqB,UAAU,CAAC,QAAQ,EAAEF,GAAG,CAAC,CAACd,MAAM,CAACe,GAAG,CAAC,CAACd,MAAM,CAAC,CAAC;AAClE;AAEA,eAAegB,SAASA,CAACb,QAAQ,EAAEC,IAAI,EAAEa,UAAU,EAAE;EACnD,OAAOvB,UAAU,CAACwB,UAAU,CAACf,QAAQ,EAAEC,IAAI,EAAEa,UAAU,EAAE,EAAE,EAAE,QAAQ,CAAC;AACxE;AAEAE,MAAM,CAACC,OAAO,GAAG;EACfnB,uBAAuB;EACvBoB,WAAW,EAAE3B,UAAU,CAAC2B,WAAW;EACnCL,SAAS;EACTN,MAAM;EACNE,UAAU;EACVhB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}