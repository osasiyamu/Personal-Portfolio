{"ast":null,"code":"'use strict';\n\nvar extend = require('xtend/mutable');\nmodule.exports = PostgresInterval;\nfunction PostgresInterval(raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw);\n  }\n  extend(this, parse(raw));\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years'];\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this);\n\n  // In addition to `properties`, we need to account for fractions of seconds.\n  if (this.milliseconds && filtered.indexOf('seconds') < 0) {\n    filtered.push('seconds');\n  }\n  if (filtered.length === 0) return '0';\n  return filtered.map(function (property) {\n    var value = this[property] || 0;\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/\\.?0+$/, '');\n    }\n    return value + ' ' + property;\n  }, this).join(' ');\n};\nvar propertiesISOEquivalent = {\n  years: 'Y',\n  months: 'M',\n  days: 'D',\n  hours: 'H',\n  minutes: 'M',\n  seconds: 'S'\n};\nvar dateProperties = ['years', 'months', 'days'];\nvar timeProperties = ['hours', 'minutes', 'seconds'];\n// according to ISO 8601\nPostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function () {\n  var datePart = dateProperties.map(buildProperty, this).join('');\n  var timePart = timeProperties.map(buildProperty, this).join('');\n  return 'P' + datePart + 'T' + timePart;\n  function buildProperty(property) {\n    var value = this[property] || 0;\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, '');\n    }\n    return value + propertiesISOEquivalent[property];\n  }\n};\nvar NUMBER = '([+-]?\\\\d+)';\nvar YEAR = NUMBER + '\\\\s+years?';\nvar MONTH = NUMBER + '\\\\s+mons?';\nvar DAY = NUMBER + '\\\\s+days?';\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?';\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?';\n}).join('\\\\s*'));\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n};\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds', 'milliseconds'];\nfunction parseMilliseconds(fraction) {\n  // add omitted zeroes\n  var microseconds = fraction + '000000'.slice(fraction.length);\n  return parseInt(microseconds, 10) / 1000;\n}\nfunction parse(interval) {\n  if (!interval) return {};\n  var matches = INTERVAL.exec(interval);\n  var isNegative = matches[8] === '-';\n  return Object.keys(positions).reduce(function (parsed, property) {\n    var position = positions[property];\n    var value = matches[position];\n    // no empty string\n    if (!value) return parsed;\n    // milliseconds are actually microseconds (up to 6 digits)\n    // with omitted trailing zeroes.\n    value = property === 'milliseconds' ? parseMilliseconds(value) : parseInt(value, 10);\n    // no zeros\n    if (!value) return parsed;\n    if (isNegative && ~negatives.indexOf(property)) {\n      value *= -1;\n    }\n    parsed[property] = value;\n    return parsed;\n  }, {});\n}","map":{"version":3,"names":["extend","require","module","exports","PostgresInterval","raw","parse","properties","prototype","toPostgres","filtered","filter","hasOwnProperty","milliseconds","indexOf","push","length","map","property","value","toFixed","replace","join","propertiesISOEquivalent","years","months","days","hours","minutes","seconds","dateProperties","timeProperties","toISOString","toISO","datePart","buildProperty","timePart","NUMBER","YEAR","MONTH","DAY","TIME","INTERVAL","RegExp","regexString","positions","negatives","parseMilliseconds","fraction","microseconds","slice","parseInt","interval","matches","exec","isNegative","Object","keys","reduce","parsed","position"],"sources":["/Users/cn/Documents/School/SYSC 4907 A/GitHub/personalportfolio/node_modules/postgres-interval/index.js"],"sourcesContent":["'use strict'\n\nvar extend = require('xtend/mutable')\n\nmodule.exports = PostgresInterval\n\nfunction PostgresInterval (raw) {\n  if (!(this instanceof PostgresInterval)) {\n    return new PostgresInterval(raw)\n  }\n  extend(this, parse(raw))\n}\nvar properties = ['seconds', 'minutes', 'hours', 'days', 'months', 'years']\nPostgresInterval.prototype.toPostgres = function () {\n  var filtered = properties.filter(this.hasOwnProperty, this)\n\n  // In addition to `properties`, we need to account for fractions of seconds.\n  if (this.milliseconds && filtered.indexOf('seconds') < 0) {\n    filtered.push('seconds')\n  }\n\n  if (filtered.length === 0) return '0'\n  return filtered\n    .map(function (property) {\n      var value = this[property] || 0\n\n      // Account for fractional part of seconds,\n      // remove trailing zeroes.\n      if (property === 'seconds' && this.milliseconds) {\n        value = (value + this.milliseconds / 1000).toFixed(6).replace(/\\.?0+$/, '')\n      }\n\n      return value + ' ' + property\n    }, this)\n    .join(' ')\n}\n\nvar propertiesISOEquivalent = {\n  years: 'Y',\n  months: 'M',\n  days: 'D',\n  hours: 'H',\n  minutes: 'M',\n  seconds: 'S'\n}\nvar dateProperties = ['years', 'months', 'days']\nvar timeProperties = ['hours', 'minutes', 'seconds']\n// according to ISO 8601\nPostgresInterval.prototype.toISOString = PostgresInterval.prototype.toISO = function () {\n  var datePart = dateProperties\n    .map(buildProperty, this)\n    .join('')\n\n  var timePart = timeProperties\n    .map(buildProperty, this)\n    .join('')\n\n  return 'P' + datePart + 'T' + timePart\n\n  function buildProperty (property) {\n    var value = this[property] || 0\n\n    // Account for fractional part of seconds,\n    // remove trailing zeroes.\n    if (property === 'seconds' && this.milliseconds) {\n      value = (value + this.milliseconds / 1000).toFixed(6).replace(/0+$/, '')\n    }\n\n    return value + propertiesISOEquivalent[property]\n  }\n}\n\nvar NUMBER = '([+-]?\\\\d+)'\nvar YEAR = NUMBER + '\\\\s+years?'\nvar MONTH = NUMBER + '\\\\s+mons?'\nvar DAY = NUMBER + '\\\\s+days?'\nvar TIME = '([+-])?([\\\\d]*):(\\\\d\\\\d):(\\\\d\\\\d)\\\\.?(\\\\d{1,6})?'\nvar INTERVAL = new RegExp([YEAR, MONTH, DAY, TIME].map(function (regexString) {\n  return '(' + regexString + ')?'\n})\n  .join('\\\\s*'))\n\n// Positions of values in regex match\nvar positions = {\n  years: 2,\n  months: 4,\n  days: 6,\n  hours: 9,\n  minutes: 10,\n  seconds: 11,\n  milliseconds: 12\n}\n// We can use negative time\nvar negatives = ['hours', 'minutes', 'seconds', 'milliseconds']\n\nfunction parseMilliseconds (fraction) {\n  // add omitted zeroes\n  var microseconds = fraction + '000000'.slice(fraction.length)\n  return parseInt(microseconds, 10) / 1000\n}\n\nfunction parse (interval) {\n  if (!interval) return {}\n  var matches = INTERVAL.exec(interval)\n  var isNegative = matches[8] === '-'\n  return Object.keys(positions)\n    .reduce(function (parsed, property) {\n      var position = positions[property]\n      var value = matches[position]\n      // no empty string\n      if (!value) return parsed\n      // milliseconds are actually microseconds (up to 6 digits)\n      // with omitted trailing zeroes.\n      value = property === 'milliseconds'\n        ? parseMilliseconds(value)\n        : parseInt(value, 10)\n      // no zeros\n      if (!value) return parsed\n      if (isNegative && ~negatives.indexOf(property)) {\n        value *= -1\n      }\n      parsed[property] = value\n      return parsed\n    }, {})\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AAErCC,MAAM,CAACC,OAAO,GAAGC,gBAAgB;AAEjC,SAASA,gBAAgBA,CAAEC,GAAG,EAAE;EAC9B,IAAI,EAAE,IAAI,YAAYD,gBAAgB,CAAC,EAAE;IACvC,OAAO,IAAIA,gBAAgB,CAACC,GAAG,CAAC;EAClC;EACAL,MAAM,CAAC,IAAI,EAAEM,KAAK,CAACD,GAAG,CAAC,CAAC;AAC1B;AACA,IAAIE,UAAU,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC;AAC3EH,gBAAgB,CAACI,SAAS,CAACC,UAAU,GAAG,YAAY;EAClD,IAAIC,QAAQ,GAAGH,UAAU,CAACI,MAAM,CAAC,IAAI,CAACC,cAAc,EAAE,IAAI,CAAC;;EAE3D;EACA,IAAI,IAAI,CAACC,YAAY,IAAIH,QAAQ,CAACI,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;IACxDJ,QAAQ,CAACK,IAAI,CAAC,SAAS,CAAC;EAC1B;EAEA,IAAIL,QAAQ,CAACM,MAAM,KAAK,CAAC,EAAE,OAAO,GAAG;EACrC,OAAON,QAAQ,CACZO,GAAG,CAAC,UAAUC,QAAQ,EAAE;IACvB,IAAIC,KAAK,GAAG,IAAI,CAACD,QAAQ,CAAC,IAAI,CAAC;;IAE/B;IACA;IACA,IAAIA,QAAQ,KAAK,SAAS,IAAI,IAAI,CAACL,YAAY,EAAE;MAC/CM,KAAK,GAAG,CAACA,KAAK,GAAG,IAAI,CAACN,YAAY,GAAG,IAAI,EAAEO,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC7E;IAEA,OAAOF,KAAK,GAAG,GAAG,GAAGD,QAAQ;EAC/B,CAAC,EAAE,IAAI,CAAC,CACPI,IAAI,CAAC,GAAG,CAAC;AACd,CAAC;AAED,IAAIC,uBAAuB,GAAG;EAC5BC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE,GAAG;EACXC,IAAI,EAAE,GAAG;EACTC,KAAK,EAAE,GAAG;EACVC,OAAO,EAAE,GAAG;EACZC,OAAO,EAAE;AACX,CAAC;AACD,IAAIC,cAAc,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC;AAChD,IAAIC,cAAc,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC;AACpD;AACA3B,gBAAgB,CAACI,SAAS,CAACwB,WAAW,GAAG5B,gBAAgB,CAACI,SAAS,CAACyB,KAAK,GAAG,YAAY;EACtF,IAAIC,QAAQ,GAAGJ,cAAc,CAC1Bb,GAAG,CAACkB,aAAa,EAAE,IAAI,CAAC,CACxBb,IAAI,CAAC,EAAE,CAAC;EAEX,IAAIc,QAAQ,GAAGL,cAAc,CAC1Bd,GAAG,CAACkB,aAAa,EAAE,IAAI,CAAC,CACxBb,IAAI,CAAC,EAAE,CAAC;EAEX,OAAO,GAAG,GAAGY,QAAQ,GAAG,GAAG,GAAGE,QAAQ;EAEtC,SAASD,aAAaA,CAAEjB,QAAQ,EAAE;IAChC,IAAIC,KAAK,GAAG,IAAI,CAACD,QAAQ,CAAC,IAAI,CAAC;;IAE/B;IACA;IACA,IAAIA,QAAQ,KAAK,SAAS,IAAI,IAAI,CAACL,YAAY,EAAE;MAC/CM,KAAK,GAAG,CAACA,KAAK,GAAG,IAAI,CAACN,YAAY,GAAG,IAAI,EAAEO,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC1E;IAEA,OAAOF,KAAK,GAAGI,uBAAuB,CAACL,QAAQ,CAAC;EAClD;AACF,CAAC;AAED,IAAImB,MAAM,GAAG,aAAa;AAC1B,IAAIC,IAAI,GAAGD,MAAM,GAAG,YAAY;AAChC,IAAIE,KAAK,GAAGF,MAAM,GAAG,WAAW;AAChC,IAAIG,GAAG,GAAGH,MAAM,GAAG,WAAW;AAC9B,IAAII,IAAI,GAAG,kDAAkD;AAC7D,IAAIC,QAAQ,GAAG,IAAIC,MAAM,CAAC,CAACL,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAACxB,GAAG,CAAC,UAAU2B,WAAW,EAAE;EAC5E,OAAO,GAAG,GAAGA,WAAW,GAAG,IAAI;AACjC,CAAC,CAAC,CACCtB,IAAI,CAAC,MAAM,CAAC,CAAC;;AAEhB;AACA,IAAIuB,SAAS,GAAG;EACdrB,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,EAAE;EACXhB,YAAY,EAAE;AAChB,CAAC;AACD;AACA,IAAIiC,SAAS,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,CAAC;AAE/D,SAASC,iBAAiBA,CAAEC,QAAQ,EAAE;EACpC;EACA,IAAIC,YAAY,GAAGD,QAAQ,GAAG,QAAQ,CAACE,KAAK,CAACF,QAAQ,CAAChC,MAAM,CAAC;EAC7D,OAAOmC,QAAQ,CAACF,YAAY,EAAE,EAAE,CAAC,GAAG,IAAI;AAC1C;AAEA,SAAS3C,KAAKA,CAAE8C,QAAQ,EAAE;EACxB,IAAI,CAACA,QAAQ,EAAE,OAAO,CAAC,CAAC;EACxB,IAAIC,OAAO,GAAGX,QAAQ,CAACY,IAAI,CAACF,QAAQ,CAAC;EACrC,IAAIG,UAAU,GAAGF,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG;EACnC,OAAOG,MAAM,CAACC,IAAI,CAACZ,SAAS,CAAC,CAC1Ba,MAAM,CAAC,UAAUC,MAAM,EAAEzC,QAAQ,EAAE;IAClC,IAAI0C,QAAQ,GAAGf,SAAS,CAAC3B,QAAQ,CAAC;IAClC,IAAIC,KAAK,GAAGkC,OAAO,CAACO,QAAQ,CAAC;IAC7B;IACA,IAAI,CAACzC,KAAK,EAAE,OAAOwC,MAAM;IACzB;IACA;IACAxC,KAAK,GAAGD,QAAQ,KAAK,cAAc,GAC/B6B,iBAAiB,CAAC5B,KAAK,CAAC,GACxBgC,QAAQ,CAAChC,KAAK,EAAE,EAAE,CAAC;IACvB;IACA,IAAI,CAACA,KAAK,EAAE,OAAOwC,MAAM;IACzB,IAAIJ,UAAU,IAAI,CAACT,SAAS,CAAChC,OAAO,CAACI,QAAQ,CAAC,EAAE;MAC9CC,KAAK,IAAI,CAAC,CAAC;IACb;IACAwC,MAAM,CAACzC,QAAQ,CAAC,GAAGC,KAAK;IACxB,OAAOwC,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"script","externalDependencies":[]}